#!/usr/bin/env python3
"""
Script de migra√ß√£o para adicionar funcionalidades de organiza√ß√£o ao CloudVault
"""

import sqlite3
import os
from datetime import datetime

def migrate_database():
    """Executar migra√ß√£o do banco de dados"""
    
    # Caminho do banco de dados
    db_path = 'instance/cloud_storage.db'
    
    # Verificar se o banco existe
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado!")
        return False
    
    try:
        # Conectar ao banco
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîÑ Iniciando migra√ß√£o do banco de dados...")
        
        # 1. Adicionar coluna shared_folder_id √† tabela file se n√£o existir
        try:
            cursor.execute("ALTER TABLE file ADD COLUMN shared_folder_id INTEGER REFERENCES shared_folder(id)")
            print("‚úÖ Coluna shared_folder_id adicionada √† tabela file")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è  Coluna shared_folder_id j√° existe na tabela file")
            else:
                raise e
        
        # 2. Criar tabela organization
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS organization (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                owner_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (owner_id) REFERENCES user (id)
            )
        """)
        print("‚úÖ Tabela organization criada")
        
        # 3. Criar tabela team
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS team (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                organization_id INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (organization_id) REFERENCES organization (id)
            )
        """)
        print("‚úÖ Tabela team criada")
        
        # 4. Criar tabela team_member
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS team_member (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                team_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                role VARCHAR(50) DEFAULT 'member',
                joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (team_id) REFERENCES team (id),
                FOREIGN KEY (user_id) REFERENCES user (id)
            )
        """)
        print("‚úÖ Tabela team_member criada")
        
        # 5. Criar tabela project
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS project (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                organization_id INTEGER NOT NULL,
                created_by INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (organization_id) REFERENCES organization (id),
                FOREIGN KEY (created_by) REFERENCES user (id)
            )
        """)
        print("‚úÖ Tabela project criada")
        
        # 6. Criar tabela shared_folder
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shared_folder (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                organization_id INTEGER NOT NULL,
                created_by INTEGER NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (organization_id) REFERENCES organization (id),
                FOREIGN KEY (created_by) REFERENCES user (id)
            )
        """)
        print("‚úÖ Tabela shared_folder criada")
        
        # 7. Criar organiza√ß√£o padr√£o se n√£o existir
        cursor.execute("SELECT COUNT(*) FROM organization")
        org_count = cursor.fetchone()[0]
        
        if org_count == 0:
            # Buscar primeiro usu√°rio para ser dono da organiza√ß√£o padr√£o
            cursor.execute("SELECT id, username FROM user ORDER BY id LIMIT 1")
            user_result = cursor.fetchone()
            
            if user_result:
                user_id, username = user_result
                
                # Criar organiza√ß√£o padr√£o
                cursor.execute("""
                    INSERT INTO organization (name, description, owner_id, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    f"Organiza√ß√£o de {username}",
                    "Organiza√ß√£o padr√£o criada automaticamente",
                    user_id,
                    datetime.utcnow(),
                    datetime.utcnow()
                ))
                
                org_id = cursor.lastrowid
                print(f"‚úÖ Organiza√ß√£o padr√£o criada (ID: {org_id})")
                
                # Criar equipe padr√£o
                cursor.execute("""
                    INSERT INTO team (name, description, organization_id, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    "Equipe Principal",
                    "Equipe padr√£o da organiza√ß√£o",
                    org_id,
                    datetime.utcnow(),
                    datetime.utcnow()
                ))
                
                team_id = cursor.lastrowid
                print(f"‚úÖ Equipe padr√£o criada (ID: {team_id})")
                
                # Adicionar usu√°rio como membro da equipe
                cursor.execute("""
                    INSERT INTO team_member (team_id, user_id, role, joined_at)
                    VALUES (?, ?, ?, ?)
                """, (
                    team_id,
                    user_id,
                    'owner',
                    datetime.utcnow()
                ))
                
                print(f"‚úÖ Usu√°rio {username} adicionado como dono da equipe")
        
        # Commit das altera√ß√µes
        conn.commit()
        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        
        # Mostrar estat√≠sticas
        cursor.execute("SELECT COUNT(*) FROM organization")
        org_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM team")
        team_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM team_member")
        member_count = cursor.fetchone()[0]
        
        print(f"\nüìä Estat√≠sticas:")
        print(f"   ‚Ä¢ Organiza√ß√µes: {org_count}")
        print(f"   ‚Ä¢ Equipes: {team_count}")
        print(f"   ‚Ä¢ Membros: {member_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {str(e)}")
        conn.rollback()
        return False
        
    finally:
        conn.close()

if __name__ == '__main__':
    print("üöÄ CloudVault - Migra√ß√£o de Organiza√ß√µes")
    print("=" * 50)
    
    success = migrate_database()
    
    if success:
        print("\nüéâ Migra√ß√£o conclu√≠da! O sistema est√° pronto para usar organiza√ß√µes.")
        print("üí° Acesse /organizations para gerenciar suas organiza√ß√µes.")
    else:
        print("\nüí• Falha na migra√ß√£o. Verifique os erros acima.") 